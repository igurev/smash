#!/usr/bin/env node

var smash = require("./"),
    optimist = require("optimist");

var argv = optimist
    .usage("Usage: \033[1msmash\033[0m [options] [file â€¦]\n\n"

+ "Version: " + smash.version + "\n\n"

+ "Concatenates one or more input files, outputting a single merged file.\n"
+ "Any import statements in the input files are expanded in-place to the\n"
+ "contents of the imported file. If the same file is imported multiple\n"
+ "times, only the first instance of the file is included.")

    .options("list", {
      describe: "output a list of imported files",
      type: "boolean",
      default: false
    })
    .options("ignore-missing", {
      describe: "ignore missing files instead of throwing an error; applies only to --list and --graph",
      type: "boolean",
      default: false
    })
    .options("graph", {
      describe: "output the import network in Makefile format",
      type: "boolean",
      default: false
    })
    .options("source-map", {
      describe: "output file where to generate source map",
      type: "string"
    })
    .options("source-map-root", {
      describe: "path to the original source to be included in the source map",
      type: "string"
    })
    .options("source-map-url", {
      describe: "path to the source map to be added in //# sourceMappingURL.  Defaults to the value passed with --source-map",
      type: "string"
    })
    .options("in-source-map", {
      describe: "input source map, useful if you're compressing JS that was generated from some other original code",
      type: "string"
    })
    .options("help", {
      describe: "display this helpful message",
      type: "boolean",
      default: false
    })
    .check(function(argv) {
      if (argv.help) return;
      if (!argv._.length) throw new Error("input required");
      if (argv.list && argv.graph) throw new Error("--list and --graph are exclusive");
    })
    .argv;

if (argv.help) return optimist.showHelp();

if (argv.graph) return void smash.readGraph(argv._, argv, function(error, files) {
  if (error) throw error;
  for (var file in files) console.log(file + ": " + files[file].join(" "));
});

if (argv.list) return void smash.readAllImports(argv._, argv, function(error, files) {
  if (error) throw error;
  console.log(files.join("\n"));
});

var options = {};
if (argv['source-map']) {
    options.sourceMap = argv['source-map'];
}

if (argv['source-map-root']) {
    options.sourceMapRoot = argv['source-map-root'];
}

if (argv['source-map-url']) {
    options.sourceMapUrl = argv['source-map-url'];
}

if (argv['source-map-root']) {
    options.sourceMapRoot = argv['source-map-root'];
}

if (argv['in-source-map']) {
    options.inputSourceMap = argv['in-source-map'];
}

smash(argv._, options).pipe(process.stdout);
